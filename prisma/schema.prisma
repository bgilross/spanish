// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Using default output so Vercel build gets @prisma/client automatically
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Domain Models ---
// We keep lessons & sentences in code. We only persist user identities (simple) and completed lesson attempts.
// A LessonAttempt stores the summary produced at quiz completion so we can later build dashboards.

model User {
  id        String          @id @default(cuid())
  name      String?
  email     String?         @unique
  emailVerified DateTime?
  isAdmin   Boolean         @default(false)
  image     String?
  createdAt DateTime        @default(now())
  attempts  LessonAttempt[]
  issues    Issue[]
  mixups    UserMixup[]
  accounts  Account[]
  sessions  Session[]
}

model LessonAttempt {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  lessonNumber     Int
  correctCount     Int
  incorrectCount   Int
  totalSubmissions Int
  references       String[] // distinct reference keys encountered in incorrect submissions
  summary          Json     // full raw summary blob (shape defined in app, flexible for evolution)
  createdAt        DateTime @default(now())

  @@index([userId, lessonNumber])
}

// Aggregated per-user mixup counts for efficient querying in dashboards
model UserMixup {
  id        String   @id @default(cuid())
  userId    String
  expected  String
  wrong     String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, expected, wrong], name: "userId_expected_wrong")
  @@index([userId, expected])
}

// Reports submitted by users about specific sentences (typos, missing refs, etc.)
model Issue {
  id                String   @id @default(cuid())
  userId            String?  // optional: anonymous reports allowed
  user              User?    @relation(fields: [userId], references: [id])
  reporterName      String?
  lessonNumber      Int
  sentenceIndex     Int?
  typo              Boolean  @default(false)
  missingReference  Boolean  @default(false)
  incorrectReference Boolean @default(false)
  wrongTranslation  Boolean  @default(false)
  other             Boolean  @default(false)
  reportContext     String?
  notes             String?
  createdAt         DateTime @default(now())

  @@index([lessonNumber, sentenceIndex])
}

// --- NextAuth standard models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
